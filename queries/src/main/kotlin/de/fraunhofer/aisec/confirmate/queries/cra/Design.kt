/*
 * This file is part of the Confirmate project.
 */
package de.fraunhofer.aisec.confirmate.queries.cra

import de.fraunhofer.aisec.confirmate.integration.AssessesMetrics
import de.fraunhofer.aisec.confirmate.integration.RepresentsEvidences
import de.fraunhofer.aisec.cpg.TranslationResult
import de.fraunhofer.aisec.cpg.assumptions.AssumptionType
import de.fraunhofer.aisec.cpg.assumptions.assume
import de.fraunhofer.aisec.cpg.graph.Node
import de.fraunhofer.aisec.cpg.graph.concepts.autoGenerated.HttpEndpoint
import de.fraunhofer.aisec.cpg.graph.concepts.http.HttpClientOperation
import de.fraunhofer.aisec.cpg.query.GenericQueryOperators
import de.fraunhofer.aisec.cpg.query.QueryTree
import de.fraunhofer.aisec.cpg.query.allExtended

@AssessesMetrics("StandardProtocolsListed")
@RepresentsEvidences("E87")
context(translationResult: TranslationResult)
fun interfacesAreRequired(
    isInterface: (Node) -> Boolean = { it is HttpClientOperation || it is HttpEndpoint }
): QueryTree<Boolean> {
    return translationResult.allExtended<Node>(isInterface) {
        QueryTree(
                value = true,
                stringRepresentation =
                    "The interface and its interactions are required for the application.",
                node = it,
                operator = GenericQueryOperators.EVALUATE,
            )
            .assume(
                AssumptionType.TrustBoundaryAssumption,
                "We assume that the identified interface is required for the application. Please verify that the interface is really required and that it does not unnecessarily place other components at risk.",
            )
    }
}

@AssessesMetrics("RiskAssessmentMappingtoServicesandControl")
@RepresentsEvidences("E3")
context(translationResult: TranslationResult)
fun interfaceHasRiskAssessment(
    isInterface: (Node) -> Boolean = { it is HttpClientOperation || it is HttpEndpoint }
): QueryTree<Boolean> {
    return translationResult.allExtended<Node>(isInterface) {
        QueryTree(
                value = true,
                stringRepresentation = "There is an interface with a risk assessment.",
                node = it,
                operator = GenericQueryOperators.EVALUATE,
            )
            .assume(
                AssumptionType.TrustBoundaryAssumption,
                "We assume that the identified interface appropriately considered in the risk analysis. This should be verified manually.",
            )
    }
}
