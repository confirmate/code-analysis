/*
 * This file is part of the Confirmate project.
 */
package de.fraunhofer.aisec.confirmate.queries.catalogs

import de.fraunhofer.aisec.confirmate.queries.CommunicationProtocol
import de.fraunhofer.aisec.confirmate.queries.SymmetricCipher
import de.fraunhofer.aisec.cpg.graph.concepts.autoGenerated.Cipher
import de.fraunhofer.aisec.cpg.query.QueryTree

/**
 * This is a placeholder class for existing requirements catalogs. These could be based on national
 * agencies' recommendations or other entities defining their interpretation of the
 * state-of-the-art. These catalogs can be used to bundle queries for a specific evaluation project.
 */
abstract class RequirementsCatalog

/**
 * If an instance of a [RequirementsCatalog] provides an interpretation of the state-of-the-art
 * regarding cryptographic aspects, it should implement this interface to signal that it provides
 * such an interpretation.
 */
interface CryptoCatalog {
    context(cipher: SymmetricCipher)
    fun checkSymmetricEncryption(): QueryTree<Boolean>

    context(cipher: Cipher)
    fun checkAsymmetricEncryption(): QueryTree<Boolean>

    context(cipher: Cipher)
    fun checkKeyExchange(): QueryTree<Boolean>

    context(cipher: Cipher)
    fun checkHashFunction(): QueryTree<Boolean>

    fun checkPQCEncryption(): QueryTree<Boolean>
}

interface TLSCatalog {
    context(protocol: CommunicationProtocol)
    fun checkTLS(): QueryTree<Boolean>
}
