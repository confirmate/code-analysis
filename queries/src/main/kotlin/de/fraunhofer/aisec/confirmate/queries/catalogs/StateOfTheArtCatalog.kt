/*
 * This file is part of the Confirmate project.
 */
package de.fraunhofer.aisec.confirmate.queries.catalogs

import de.fraunhofer.aisec.confirmate.queries.HashFunction
import de.fraunhofer.aisec.confirmate.queries.Signature
import de.fraunhofer.aisec.confirmate.queries.SymmetricCipher
import de.fraunhofer.aisec.cpg.graph.concepts.autoGenerated.Cipher
import de.fraunhofer.aisec.cpg.graph.concepts.autoGenerated.MessageAuthenticationCode
import de.fraunhofer.aisec.cpg.graph.concepts.autoGenerated.TransportEncryption
import de.fraunhofer.aisec.cpg.query.QueryTree
import de.fraunhofer.aisec.cpg.query.and

/**
 * This is a placeholder class for existing requirements catalogs. These could be based on national
 * agencies' recommendations or other entities defining their interpretation of the
 * state-of-the-art. These catalogs can be used to bundle queries for a specific evaluation project.
 */
abstract class RequirementsCatalog

/**
 * If an instance of a [RequirementsCatalog] provides an interpretation of the state-of-the-art
 * regarding cryptographic aspects, it should implement this interface to signal that it provides
 * such an interpretation.
 */
interface CryptoCatalog {
    val requirePQC: Boolean

    context(signature: Signature)
    fun checkSignature(): QueryTree<Boolean>

    context(cipher: SymmetricCipher)
    fun checkSymmetricEncryption(): QueryTree<Boolean>

    context(cipher: Cipher)
    fun checkAsymmetricEncryption(): QueryTree<Boolean>

    context(cipher: Cipher)
    fun checkKeyExchange(): QueryTree<Boolean>

    context(hashFunction: HashFunction)
    fun checkHashFunction(): QueryTree<Boolean>

    context(mac: MessageAuthenticationCode)
    fun checkMAC(): QueryTree<Boolean>
}

interface TLSCatalog {
    context(protocol: TransportEncryption)
    fun checkTLS(): QueryTree<Boolean>
}

/**
 * If an instance of a [RequirementsCatalog] provides an interpretation of the state-of-the-art
 *  regarding secure configurations, it should implement this interface to signal that it provides
 *  such an interpretation and fill values into the secure configurations map.
 */
interface SecureConfigurationsCatalog {

    /**
     * This Mapping of secure configuration keys maps to a list of allowed values. A specification of this catalog only
     * needs to set the values that are recommended or considered.
     */
    val secureConfigurations: MutableMap<String, List<String>>

    /**
     * This function checks if a configuration is secure. This default implementation checks if the configName has an
     * entry in the Map. If there is no such entry, no restriction was placed on the value of a configuration. If such
     * an entry exists, the value must be amongst the allowed values in the list. For mor complex or catalog adequate
     * checks an implementing catalog may override this function.
     */
    fun isSecureConfigValue(configName: String, configValue: String): Boolean {
        return !secureConfigurations.containsKey(configName) || secureConfigurations.get(configName)?.contains(configValue)?: false
    }
}
