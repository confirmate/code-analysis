/*
 * This file is part of the Confirmate project.
 */
package de.fraunhofer.aisec.confirmate.queries.cra

import de.fraunhofer.aisec.confirmate.integration.AssessesMetrics
import de.fraunhofer.aisec.confirmate.integration.RepresentsEvidences
import de.fraunhofer.aisec.confirmate.queries.DataSafeGuard
import de.fraunhofer.aisec.cpg.TranslationResult
import de.fraunhofer.aisec.cpg.graph.Backward
import de.fraunhofer.aisec.cpg.graph.Forward
import de.fraunhofer.aisec.cpg.graph.GraphToFollow
import de.fraunhofer.aisec.cpg.graph.Interprocedural
import de.fraunhofer.aisec.cpg.graph.Node
import de.fraunhofer.aisec.cpg.graph.concepts.Operation
import de.fraunhofer.aisec.cpg.graph.concepts.autoGenerated.DatabaseOperation
import de.fraunhofer.aisec.cpg.graph.concepts.file.WriteFile
import de.fraunhofer.aisec.cpg.query.GenericQueryOperators
import de.fraunhofer.aisec.cpg.query.QueryTree
import de.fraunhofer.aisec.cpg.query.allExtended
import de.fraunhofer.aisec.cpg.query.dataFlow


/**
 * This query checks whether data has appropriate safeguards applied before being stored or
 * transmitted. A safeguard can be encryption, anonymization, pseudonymization, or any other data
 * protection technique represented by a [DataSafeGuard] concept.
 */
@AssessesMetrics("DataMinimisationTechniquesEnabled")
@RepresentsEvidences("E79")
context(tr: TranslationResult)
fun sensitiveDataHasSafeguards(
    isSensitiveData: (Node) -> Boolean,
    isStorageOperation: (Node) -> Boolean
): QueryTree<Boolean> {
    return tr.allExtended<Node>(isStorageOperation) { storageNode ->
        dataFlow(
            startNode = storageNode,
            direction = Backward(GraphToFollow.DFG),
            scope = Interprocedural(),
            predicate = { node ->
                if (isSensitiveData(node)) {
                    hasSafeguardApplied(node)
                } else {
                    // Not sensitive data, continue searching
                    false
                }
            },
        )
    }
}

/**
 * This query checks whether collected data is actually used for computation/processing, or if it's
 * only stored without being processed.
 */
@AssessesMetrics("DataMinimisationTechniquesEnabled")
@RepresentsEvidences("E79")
context(tr: TranslationResult)
fun collectedDataIsProcessed(
    isDataCollection: (Node) -> Boolean
): QueryTree<Boolean> {
    return tr.allExtended<Node>(isDataCollection) { collectionNode ->
        val hasComputation =
            dataFlow(
                startNode = collectionNode,
                direction = Forward(GraphToFollow.DFG),
                scope = Interprocedural(),
                predicate = { node ->
                    node.hasComputationalOperation()
                },
            )

        hasComputation
    }
}

/**
 * Helper function that determines if a node represents a computational operation
 */
fun Node.hasComputationalOperation(): Boolean {
    val hasOperation = this.overlays.any { it is Operation }

    if (hasOperation) {
        // If it has an operation, check if it's NOT a pure storage operation
        val isStorageOperation =
            this.overlays.any { overlay ->
                overlay is WriteFile || overlay is DatabaseOperation
            }

        // We want operations that are NOT storage-only
        return !isStorageOperation
    }

    return false
}

/**
 * Check if a data node has a [DataSafeGuard] applied.
 */
context(tr: TranslationResult)
fun hasSafeguardApplied(dataNode: Node): Boolean {
    return tr.allExtended<DataSafeGuard> { safeguard ->
        QueryTree(
            value = safeguard.data == dataNode,
            node = safeguard,
            operator = GenericQueryOperators.EVALUATE,
        )
    }.value
}