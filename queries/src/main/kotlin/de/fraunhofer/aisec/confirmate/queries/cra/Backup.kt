/*
 * This file is part of the Confirmate project.
 */
package de.fraunhofer.aisec.confirmate.queries.cra

import de.fraunhofer.aisec.cpg.TranslationResult
import de.fraunhofer.aisec.cpg.graph.Forward
import de.fraunhofer.aisec.cpg.graph.GraphToFollow
import de.fraunhofer.aisec.cpg.graph.Interprocedural
import de.fraunhofer.aisec.cpg.graph.Node
import de.fraunhofer.aisec.cpg.graph.allChildrenWithOverlays
import de.fraunhofer.aisec.cpg.graph.concepts.autoGenerated.Backup
import de.fraunhofer.aisec.cpg.graph.concepts.autoGenerated.DatabaseStorage
import de.fraunhofer.aisec.cpg.graph.concepts.file.WriteFile
import de.fraunhofer.aisec.cpg.query.May
import de.fraunhofer.aisec.cpg.query.QueryTree
import de.fraunhofer.aisec.cpg.query.allExtended
import de.fraunhofer.aisec.cpg.query.dataFlow

context(translationResult: TranslationResult)
fun relevantDataFlowToBackup(
    isRelevantData: (Node) -> Boolean = {
        it is DatabaseStorage ||
            translationResult
                .allChildrenWithOverlays<WriteFile> { write -> it == write.what }
                .isNotEmpty()
    }
): QueryTree<Boolean> {
    return translationResult.allExtended<Node>(sel = isRelevantData) { data ->
        // Find a data flow from the relevant data to a backup
        dataFlow(
            startNode = data,
            direction = Forward(GraphToFollow.DFG),
            type = May,
            scope = Interprocedural(),
            predicate = { it is Backup },
        )
    }
}
