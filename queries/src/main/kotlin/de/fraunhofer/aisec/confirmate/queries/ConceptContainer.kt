/*
 * This file is part of the Confirmate project.
 */
package de.fraunhofer.aisec.confirmate.queries

import de.fraunhofer.aisec.cpg.graph.Node
import de.fraunhofer.aisec.cpg.graph.concepts.Concept
import de.fraunhofer.aisec.cpg.graph.concepts.autoGenerated.*

/**
 * Represents a safeguard applied to data to ensure data minimisation principles are followed. This
 * concept wraps various protection techniques like encryption, anonymization, pseudonymization, or
 * caching with limited retention.
 */
class DataSafeGuard(val data: Node?, underlyingNode: Node?) : Concept(underlyingNode)

/** Extended [DatabaseStorage] with TTL (Time-To-Live) / retention policy information. */
class DatabaseStorageWithTTL(
    val ttlSeconds: Long?,
    val hasAutomatedCleanup: Boolean,
    activityLogging: ActivityLogging?,
    atRestEncryption: Boolean?,
    backups: MutableList<Backup?>,
    immutability: Immutability?,
    resourceLogging: ResourceLogging?,
    internetAccessibleEndpoint: Boolean?,
    geoLocation: GeoLocation?,
    loggings: MutableList<Logging?>,
    redundancies: Redundancy?,
    usageStatistics: UsageStatistics?,
    creation_time: java.time.ZonedDateTime?,
    description: String?,
    labels: MutableMap<String, String>?,
    name: String?,
    raw: String?,
    parent: Resource?,
    underlyingNode: Node?,
) :
    DatabaseStorage(
        activityLogging,
        atRestEncryption,
        backups,
        immutability,
        resourceLogging,
        internetAccessibleEndpoint,
        geoLocation,
        loggings,
        redundancies,
        usageStatistics,
        creation_time,
        description,
        labels,
        name,
        raw,
        parent,
        underlyingNode,
    )
