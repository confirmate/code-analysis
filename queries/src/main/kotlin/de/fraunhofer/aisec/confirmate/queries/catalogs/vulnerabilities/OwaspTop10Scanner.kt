/*
 * This file is part of the Confirmate project.
 */
package de.fraunhofer.aisec.confirmate.queries.catalogs.vulnerabilities

import de.fraunhofer.aisec.confirmate.queries.InputValidation
import de.fraunhofer.aisec.confirmate.queries.SymmetricCipher
import de.fraunhofer.aisec.confirmate.queries.catalogs.CryptoCatalog
import de.fraunhofer.aisec.confirmate.queries.cra.adminAuthenticationWithMFA
import de.fraunhofer.aisec.confirmate.queries.cra.anomalyDetectionEnabled
import de.fraunhofer.aisec.confirmate.queries.cra.authenticationAtEndpoint
import de.fraunhofer.aisec.confirmate.queries.cra.authenticationBeforeCriticalFunctionality
import de.fraunhofer.aisec.confirmate.queries.cra.authenticationSelector
import de.fraunhofer.aisec.confirmate.queries.cra.authorizationAtEndpoint
import de.fraunhofer.aisec.confirmate.queries.cra.authorizationBeforeCriticalFunctionality
import de.fraunhofer.aisec.confirmate.queries.cra.authorizationSelector
import de.fraunhofer.aisec.confirmate.queries.cra.criticalSelector
import de.fraunhofer.aisec.confirmate.queries.cra.identityPasswordPolicyEnabled
import de.fraunhofer.aisec.confirmate.queries.cra.logEntriesContainInitiator
import de.fraunhofer.aisec.confirmate.queries.cra.logEntriesHaveTimestamp
import de.fraunhofer.aisec.confirmate.queries.cra.loggingEnabledByDefault
import de.fraunhofer.aisec.confirmate.queries.cra.loggingOnSecurityErrors
import de.fraunhofer.aisec.confirmate.queries.cra.loggingOptOut
import de.fraunhofer.aisec.confirmate.queries.cra.relevantActivityHasLogging
import de.fraunhofer.aisec.cpg.TranslationResult
import de.fraunhofer.aisec.cpg.graph.Backward
import de.fraunhofer.aisec.cpg.graph.GraphToFollow
import de.fraunhofer.aisec.cpg.graph.Interprocedural
import de.fraunhofer.aisec.cpg.graph.concepts.autoGenerated.AuthenticationOperation
import de.fraunhofer.aisec.cpg.graph.concepts.autoGenerated.Cipher
import de.fraunhofer.aisec.cpg.graph.concepts.autoGenerated.DatabaseOperation
import de.fraunhofer.aisec.cpg.graph.concepts.autoGenerated.FileOperation
import de.fraunhofer.aisec.cpg.graph.concepts.autoGenerated.HttpClientOperation
import de.fraunhofer.aisec.cpg.query.GenericQueryOperators
import de.fraunhofer.aisec.cpg.query.Must
import de.fraunhofer.aisec.cpg.query.QueryTree
import de.fraunhofer.aisec.cpg.query.allExtended
import de.fraunhofer.aisec.cpg.query.and
import de.fraunhofer.aisec.cpg.query.dataFlow
import kotlin.and

/**
 * Checks for vulnerability categories as defined by the
 * [OWASP Top 10 - 2021](https://owasp.org/Top10/).
 */
class OwaspTop10Scanner : VulnerabilityCatalogScanner {
    /* Missing checks:
       - A04:2021-Insecure Design is a new category for 2021, with a focus on risks related to design flaws. If we genuinely want to “move left” as an industry, it calls for more use of threat modeling, secure design patterns and principles, and reference architectures.
       - A06:2021-Vulnerable and Outdated Components was previously titled Using Components with Known Vulnerabilities and is #2 in the Top 10 community survey, but also had enough data to make the Top 10 via data analysis. This category moves up from #9 in 2017 and is a known issue that we struggle to test and assess risk. It is the only category not to have any Common Vulnerability and Exposures (CVEs) mapped to the included CWEs, so a default exploit and impact weights of 5.0 are factored into their scores.
       - A08:2021-Software and Data Integrity Failures is a new category for 2021, focusing on making assumptions related to software updates, critical data, and CI/CD pipelines without verifying integrity. One of the highest weighted impacts from Common Vulnerability and Exposures/Common Vulnerability Scoring System (CVE/CVSS) data mapped to the 10 CWEs in this category. Insecure Deserialization from 2017 is now a part of this larger category.
       - A10:2021-Server-Side Request Forgery is added from the Top 10 community survey (#1). The data shows a relatively low incidence rate with above average testing coverage, along with above-average ratings for Exploit and Impact potential. This category represents the scenario where the security community members are telling us this is important, even though it’s not illustrated in the data at this time.
    */
    context(translationResult: TranslationResult, cryptoCatalog: CryptoCatalog)
    override fun scanAll(): QueryTree<Boolean> {
        return brokenAccessControl() and
            cryptographicFailures() and
            loggingFailures() and
            sqlInjections() and
            insecureConfigurations()
    }

    /**
     * Query to detect broken access control vulnerabilities.
     * [A01:2021-Broken Access Control of OWASP Top 10](https://owasp.org/Top10/A01_2021-Broken_Access_Control/)
     * and
     * [A07:2021-Identification and Authentication](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/).
     */
    context(translationResult: TranslationResult)
    fun brokenAccessControl(): QueryTree<Boolean> {
        return authorizationAtEndpoint(::authorizationSelector) and
            identityPasswordPolicyEnabled() and
            authorizationBeforeCriticalFunctionality(::authorizationSelector, ::criticalSelector) and
            authenticationAtEndpoint(::authenticationSelector) and
            authenticationBeforeCriticalFunctionality(::authenticationSelector, ::criticalSelector) and
            loggingOnSecurityErrors(::authenticationSelector, ::authorizationSelector) and adminAuthenticationWithMFA(::authenticationSelector) and
            identityPasswordPolicyEnabled() and
            anomalyDetectionEnabled()
    }

    /**
     * Query to detect cryptographic failures.
     * [A02:2021-Cryptographic Failures of OWASP Top 10](https://owasp.org/Top10/A02_2021-Cryptographic_Failures/).
     */
    context(translationResult: TranslationResult, cryptoCatalog: CryptoCatalog)
    fun cryptographicFailures(): QueryTree<Boolean> {
        return translationResult.allExtended<SymmetricCipher> {
            with(it) { cryptoCatalog.checkSymmetricEncryption() }
        } and
            translationResult.allExtended<Cipher> {
                with(it) {
                    cryptoCatalog
                        .checkAsymmetricEncryption() /* and cryptoCatalog.checkKeyExchange() and cryptoCatalog.checkPQCEncryption() and cryptoCatalog.checkHashFunction() */
                }
            }
    }

    /**
     * Query to detect failures in logging and monitoring.
     * [A09:2021-Security Logging and Monitoring Failures](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).
     */
    context(translationResult: TranslationResult)
    fun loggingFailures(): QueryTree<Boolean> {
        return relevantActivityHasLogging({
                it is FileOperation ||
                    it is DatabaseOperation ||
                    it is HttpClientOperation ||
                    it is
                        AuthenticationOperation /* TODO: No modifications to settings possible yet*/
            })
            .withMetricId("ActivityLoggingEnabled")
            .withEvidenceId("E99") and
            logEntriesHaveTimestamp() and
            logEntriesContainInitiator().withMetricId("IdentityRecentActivity") and
            loggingOptOut { false /* There's no opt-out mechanism we can identify. */ } and
            loggingEnabledByDefault()

        /*return QueryTree(
            value = true,
            stringRepresentation =
                "The application has sufficient logging and monitoring mechanisms in place. This is already checked by requirement 1.14.",
            node = null,
            operator = GenericQueryOperators.EVALUATE,
        )*/
    }

    /**
     * Query to detect injection vulnerabilities.
     * [A03:2021-Injection of OWASP Top 10](https://owasp.org/Top10/A03_2021-Injection/).
     */
    context(translationResult: TranslationResult)
    fun sqlInjections(): QueryTree<Boolean> {
        return translationResult.allExtended<DatabaseOperation> { dbOp ->
            dataFlow(
                startNode = dbOp,
                direction = Backward(GraphToFollow.DFG),
                type = Must,
                scope = Interprocedural(),
                predicate = { it is InputValidation && it.concept == dbOp.concept },
            )
        }
    }

    /**
     * Query to detect insecure (default) configurations.
     * [A05:2021-Security Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration/).
     */
    context(translationResult: TranslationResult)
    fun insecureConfigurations(): QueryTree<Boolean> {
        return QueryTree(
            value = true,
            stringRepresentation =
                "The application is not affected by insecure (default) configurations. This is already checked by requirement 1.3.",
            node = null,
            operator = GenericQueryOperators.EVALUATE,
        )
    }
}
