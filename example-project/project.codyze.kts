/*
 * This file is part of the Confirmate project.
 */
@file:OptIn(ExperimentalUuidApi::class)

import de.fraunhofer.aisec.confirmate.queries.catalogs.german.BSI_TR02102
import de.fraunhofer.aisec.confirmate.queries.cra.*
import de.fraunhofer.aisec.cpg.graph.concepts.autoGenerated.AuthenticationOperation
import de.fraunhofer.aisec.cpg.graph.concepts.autoGenerated.DatabaseOperation
import de.fraunhofer.aisec.cpg.graph.concepts.autoGenerated.FileOperation
import de.fraunhofer.aisec.cpg.graph.concepts.autoGenerated.HttpClientOperation
import kotlin.uuid.ExperimentalUuidApi

include {
    // No includes so far
}

project {
    name = "Example CRA project"

    toe {
        name = "Example project"
        version = "1.0.0"

        architecture {
            modules {
                module("test-module") {
                    directory = "src/main/kotlin/resources/toe"
                    include("toe")
                }
            }
        }
    }

    requirements {
        category("CRA") {
            requirement {
                name = "X.1.1.5"
                description =
                    "Products with digital elements shall ensure protection from unauthorised access by appropriate control mechanisms, including but not limited to authentication, identity or access management systems, and report on possible unauthorised access;"

                fulfilledBy {
                    authorizationAtEndpoint(authorizationSelector, criticalSelector)
                        .withMetricId("AnomalyDetectionEnabled")
                        .withEvidenceId("E67") and
                        authorizationBeforeCriticalFunctionality(authorizationSelector, criticalSelector)
                            .withMetricId("AnomalyDetectionEnabled")
                            .withEvidenceId("E67") and
                        authenticationAtEndpoint(authenticationSelector)
                            .withMetricId("AnomalyDetectionEnabled")
                            .withEvidenceId("E67") and
                        authenticationBeforeCriticalFunctionality(authenticationSelector)
                            .withMetricId("AnomalyDetectionEnabled")
                            .withEvidenceId("E67") and
                        loggingOnSecurityErrors(authenticationSelector, authorizationSelector)
                            .withMetricId("AnomalyDetectionOutput")
                            .withEvidenceId("E67") and
                            adminAuthenticationMFA()
                                .withMetricId("AdminMFAEnabled")
                                .withEvidenceId("E62") and
                            identityPasswordPolicyEnabled()
                                .withMetricId("IdentityPasswordPolicyEnabled")
                                .withEvidenceId("E62")
                                .withEvidenceId("E63")
                }
            }

            requirement {
                name = "X.1.1.6"
                description =
                    "Products with digital elements shall protect the confidentiality of stored, transmitted or otherwise processed data, personal or other, such as by encrypting relevant data at rest or in transit by state of the art mechanisms, and by using other technical means;"

                fulfilledBy {
                    with(BSI_TR02102()) {
                        dataEncryptedBeforePersisting()
                            .withMetricId("AtRestEncryptionEnabled")
                            .withEvidenceId("E70") and
                            dataInTransitEncrypted().withMetricId("InTransitEncryptionEnabled")
                    }
                }
            }

            requirement {
                name = "X.1.1.7"
                description =
                    "Products with digital elements shall protect the integrity of stored, transmitted or otherwise processed data, personal or other, commands, programs and configuration against any manipulation or modification not authorised by the user, and report on corruptions;"

                fulfilledBy {
                    with(BSI_TR02102()) {
                        secureProtocolsEnabled(
                                {
                                    true /* Let's just say that all connections have to be secure. This should be fair nowadays. */
                                },
                                {
                                    false /* We do not know this, so let's fail to enforce a manual check. */
                                },
                            )
                            .withMetricId("InTransitEncryptionEnabled")
                    }
                }
            }

            requirement {
                name = "X.1.1.10"
                description =
                    "Products with digital elements shall minimise the negative impact by the products themselves or connected devices on the availability of services provided by other devices or networks;"

                fulfilledBy {
                    interfacesAreRequired()
                        .withMetricId("StandardProtocolsListed")
                        .withEvidenceId("E87")
                }
            }

            requirement {
                name = "X.1.1.11"
                description =
                    "Products with digital elements shall be designed, developed and produced to limit attack surfaces, including external interfaces;"

                fulfilledBy {
                    interfaceHasRiskAssessment()
                        .withMetricId("RiskAssessmentMappingtoServicesandControl")
                        .withEvidenceId("E3") and
                        interfacesAreRequired()
                            .withMetricId("StandardProtocolsListed")
                            .withEvidenceId("E87")
                }
            }

            requirement {
                name = "X.1.1.12"
                description =
                    "Products with digital elements shall be designed, developed and produced to reduce the impact of an incident using appropriate exploitation mitigation mechanisms and techniques;"

                fulfilledBy { relevantDataFlowToBackup() }
            }

            requirement {
                name = "X.1.1.13"
                description =
                    " Products with digital elements shall provide security related information by recording and monitoring relevant internal activity, including the access to or modification of data, services or functions, with an opt-out mechanism for the user;"

                fulfilledBy {
                    relevantActivityHasLogging({
                            it is FileOperation ||
                                it is DatabaseOperation ||
                                it is HttpClientOperation ||
                                it is
                                    AuthenticationOperation /* TODO: No modifications to settings possible yet*/
                        })
                        .withMetricId("ActivityLoggingEnabled")
                        .withEvidenceId("E99") and
                        logEntriesHaveTimestamp() and
                        logEntriesContainInitiator().withMetricId("IdentityRecentActivity") and
                        loggingOptOut {
                            false /* There's no opt-out mechanism we can identify. */
                        } and
                        loggingEnabledByDefault() /* and
                                                  loggedDataAvailableToUser().withMetricId("SecurityDataAvailableToUser").withEvidenceId("E97")*/
                }
            }
        }
    }
}
